/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PostingRouteImport } from './routes/posting'
import { Route as NotificationsRouteImport } from './routes/notifications'
import { Route as LoginRedirectRouteImport } from './routes/login-redirect'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AtChar123acctChar125RouteImport } from './routes/@{$acct}'
import { Route as IndexRouteImport } from './routes/index'
import { Route as NotesIdRouteImport } from './routes/notes/$id'

const PostingRoute = PostingRouteImport.update({
  id: '/posting',
  path: '/posting',
  getParentRoute: () => rootRouteImport,
} as any)
const NotificationsRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRedirectRoute = LoginRedirectRouteImport.update({
  id: '/login-redirect',
  path: '/login-redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AtChar123acctChar125Route = AtChar123acctChar125RouteImport.update({
  id: '/@{$acct}',
  path: '/@{$acct}',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesIdRoute = NotesIdRouteImport.update({
  id: '/notes/$id',
  path: '/notes/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/@{$acct}': typeof AtChar123acctChar125Route
  '/login': typeof LoginRoute
  '/login-redirect': typeof LoginRedirectRoute
  '/notifications': typeof NotificationsRoute
  '/posting': typeof PostingRoute
  '/notes/$id': typeof NotesIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/@{$acct}': typeof AtChar123acctChar125Route
  '/login': typeof LoginRoute
  '/login-redirect': typeof LoginRedirectRoute
  '/notifications': typeof NotificationsRoute
  '/posting': typeof PostingRoute
  '/notes/$id': typeof NotesIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/@{$acct}': typeof AtChar123acctChar125Route
  '/login': typeof LoginRoute
  '/login-redirect': typeof LoginRedirectRoute
  '/notifications': typeof NotificationsRoute
  '/posting': typeof PostingRoute
  '/notes/$id': typeof NotesIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/@{$acct}'
    | '/login'
    | '/login-redirect'
    | '/notifications'
    | '/posting'
    | '/notes/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/@{$acct}'
    | '/login'
    | '/login-redirect'
    | '/notifications'
    | '/posting'
    | '/notes/$id'
  id:
    | '__root__'
    | '/'
    | '/@{$acct}'
    | '/login'
    | '/login-redirect'
    | '/notifications'
    | '/posting'
    | '/notes/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AtChar123acctChar125Route: typeof AtChar123acctChar125Route
  LoginRoute: typeof LoginRoute
  LoginRedirectRoute: typeof LoginRedirectRoute
  NotificationsRoute: typeof NotificationsRoute
  PostingRoute: typeof PostingRoute
  NotesIdRoute: typeof NotesIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/posting': {
      id: '/posting'
      path: '/posting'
      fullPath: '/posting'
      preLoaderRoute: typeof PostingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login-redirect': {
      id: '/login-redirect'
      path: '/login-redirect'
      fullPath: '/login-redirect'
      preLoaderRoute: typeof LoginRedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/@{$acct}': {
      id: '/@{$acct}'
      path: '/@{$acct}'
      fullPath: '/@{$acct}'
      preLoaderRoute: typeof AtChar123acctChar125RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes/$id': {
      id: '/notes/$id'
      path: '/notes/$id'
      fullPath: '/notes/$id'
      preLoaderRoute: typeof NotesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AtChar123acctChar125Route: AtChar123acctChar125Route,
  LoginRoute: LoginRoute,
  LoginRedirectRoute: LoginRedirectRoute,
  NotificationsRoute: NotificationsRoute,
  PostingRoute: PostingRoute,
  NotesIdRoute: NotesIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
