/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by unplugin-auto-import
// biome-ignore lint: disable
export {}
declare global {
  const NOTIFICATION_TYPES: typeof import('./lib/notifications')['NOTIFICATION_TYPES']
  const QueryClient: typeof import('@tanstack/react-query')['QueryClient']
  const QueryClientProvider: typeof import('@tanstack/react-query')['QueryClientProvider']
  const cn: typeof import('./lib/utils')['cn']
  const collectAst: typeof import('./lib/note')['collectAst']
  const copyToClipboard: typeof import('./lib/utils')['copyToClipboard']
  const countAst: typeof import('./lib/note')['countAst']
  const createRef: typeof import('react')['createRef']
  const cyrb53: typeof import('./lib/hash')['cyrb53']
  const forwardRef: typeof import('react')['forwardRef']
  const getNoteExcerpt: typeof import('./services/note-excerpt')['getNoteExcerpt']
  const getNoteRemoteUrl: typeof import('./lib/note')['getNoteRemoteUrl']
  const getNoteRoute: typeof import('./lib/note')['getNoteRoute']
  const getRelativeUrl: typeof import('./services/inject-misskey-api')['getRelativeUrl']
  const getUserTokenOrNull: typeof import('./services/inject-misskey-api')['getUserTokenOrNull']
  const injectCurrentSite: typeof import('./services/inject-misskey-api')['injectCurrentSite']
  const injectCurrentSiteOrNull: typeof import('./services/inject-misskey-api')['injectCurrentSiteOrNull']
  const injectMisskeyApi: typeof import('./services/inject-misskey-api')['injectMisskeyApi']
  const injectMisskeyStream: typeof import('./services/inject-misskey-api')['injectMisskeyStream']
  const injectUserToken: typeof import('./services/inject-misskey-api')['injectUserToken']
  const isPureRenote: typeof import('./lib/note')['isPureRenote']
  const lazy: typeof import('react')['lazy']
  const memo: typeof import('react')['memo']
  const normalizeEmojiName: typeof import('./lib/emojis')['normalizeEmojiName']
  const onlyWhenNonInteractableContentClicked: typeof import('./lib/utils')['onlyWhenNonInteractableContentClicked']
  const patchNote: typeof import('./hooks/use-note')['patchNote']
  const registerNote: typeof import('./hooks/use-note')['registerNote']
  const someAst: typeof import('./lib/note')['someAst']
  const startTransition: typeof import('react')['startTransition']
  const storeUserSite: typeof import('./services/inject-misskey-api')['storeUserSite']
  const storeUserToken: typeof import('./services/inject-misskey-api')['storeUserToken']
  const useAcceptFollowRequestAction: typeof import('./hooks/user-action')['useAcceptFollowRequestAction']
  const useAppearNote: typeof import('./hooks/use-note')['useAppearNote']
  const useCallback: typeof import('react')['useCallback']
  const useCancelFollowRequestAction: typeof import('./hooks/user-action')['useCancelFollowRequestAction']
  const useContext: typeof import('react')['useContext']
  const useDebugValue: typeof import('react')['useDebugValue']
  const useDebugger: typeof import('./debug/debug')['useDebugger']
  const useDeferredValue: typeof import('react')['useDeferredValue']
  const useDeleteNoteAction: typeof import('./hooks/note-actions')['useDeleteNoteAction']
  const useEffect: typeof import('react')['useEffect']
  const useEmojis: typeof import('./stores/emojis')['useEmojis']
  const useGlobalTimeline: typeof import('./hooks/use-timeline')['useGlobalTimeline']
  const useHomeTimeline: typeof import('./hooks/use-timeline')['useHomeTimeline']
  const useId: typeof import('react')['useId']
  const useImperativeHandle: typeof import('react')['useImperativeHandle']
  const useInfiniteQuery: typeof import('@tanstack/react-query')['useInfiniteQuery']
  const useInsertionEffect: typeof import('react')['useInsertionEffect']
  const useIsMobile: typeof import('./hooks/use-mobile')['useIsMobile']
  const useLayoutEffect: typeof import('react')['useLayoutEffect']
  const useLikeNoteAction: typeof import('./hooks/note-actions')['useLikeNoteAction']
  const useMainChannelListener: typeof import('./hooks/use-main-channel')['useMainChannelListener']
  const useMe: typeof import('./stores/me')['useMe']
  const useMemo: typeof import('react')['useMemo']
  const useMutation: typeof import('@tanstack/react-query')['useMutation']
  const useNavigate: typeof import('@tanstack/react-router')['useNavigate']
  const useNoteQuery: typeof import('./hooks/use-note-query')['useNoteQuery']
  const useNoteUpdateListener: typeof import('./hooks/use-note')['useNoteUpdateListener']
  const useNoteValue: typeof import('./hooks/use-note')['useNoteValue']
  const useParams: typeof import('@tanstack/react-router')['useParams']
  const useQuery: typeof import('@tanstack/react-query')['useQuery']
  const useQueryClient: typeof import('@tanstack/react-query')['useQueryClient']
  const useReactNoteAction: typeof import('./hooks/note-actions')['useReactNoteAction']
  const useReducer: typeof import('react')['useReducer']
  const useRef: typeof import('react')['useRef']
  const useRejectFollowRequestAction: typeof import('./hooks/user-action')['useRejectFollowRequestAction']
  const useRenoteAction: typeof import('./hooks/note-actions')['useRenoteAction']
  const useRouter: typeof import('@tanstack/react-router')['useRouter']
  const useSearch: typeof import('@tanstack/react-router')['useSearch']
  const useSetableMe: typeof import('./stores/me')['useSetableMe']
  const useSetableSiteMeta: typeof import('./stores/site')['useSetableSiteMeta']
  const useSiteMeta: typeof import('./stores/site')['useSiteMeta']
  const useState: typeof import('react')['useState']
  const useSyncExternalStore: typeof import('react')['useSyncExternalStore']
  const useTimeline: typeof import('./hooks/use-timeline')['useTimeline']
  const useTimelineTabs: typeof import('./hooks/use-timeline-tabs')['useTimelineTabs']
  const useTransition: typeof import('react')['useTransition']
  const useTranslateAction: typeof import('./hooks/note-actions')['useTranslateAction']
  const useTranslation: typeof import('react-i18next')['useTranslation']
  const useUndoReactNoteAction: typeof import('./hooks/note-actions')['useUndoReactNoteAction']
  const useUnrenoteAction: typeof import('./hooks/note-actions')['useUnrenoteAction']
  const withStopPrevent: typeof import('./lib/utils')['withStopPrevent']
}
// for type re-export
declare global {
  // @ts-ignore
  export type { TimelineTypes } from './hooks/use-timeline'
  import('./hooks/use-timeline')
  // @ts-ignore
  export type { NotificationIncludeableType } from './lib/notifications'
  import('./lib/notifications')
  // @ts-ignore
  export type { NoteWithExtension } from './types/note'
  import('./types/note')
  // @ts-ignore
  export type { Tab } from './types/page-header'
  import('./types/page-header')
}
